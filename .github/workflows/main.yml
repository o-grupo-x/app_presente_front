name: Frontend CI/CD

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install Dependencies
        working-directory: ./
        run: npm ci
      - name: Run Frontend Tests
        working-directory: ./
        run: npm test || true
      - name: Archive Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            **/test-results/**
            **/*.xml

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install Dependencies
        working-directory: ./
        run: npm ci
      - name: Build Frontend
        working-directory: ./
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
        run: npm run build
      - name: Archive Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: |
            .next/
            out/

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Debug DockerHub Username
        run: echo "DOCKERHUB_USERNAME is $DOCKERHUB_USERNAME"
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      - name: Build and Push Docker Image
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
          docker build -t $DOCKERHUB_USERNAME/app_presente_front:staging .
          docker push $DOCKERHUB_USERNAME/app_presente_front:staging
          echo "Pushed $DOCKERHUB_USERNAME/app_presente_front:staging"
      - name: Deploy to Staging EC2
        env:
          EC2_HOST: ${{ secrets.STAGING_EC2_HOST }}
          EC2_SSH_KEY: ${{ secrets.STAGING_EC2_SSH_KEY }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
        run: |
          echo "$EC2_SSH_KEY" > ssh_key.pem
          chmod 400 ssh_key.pem
          ssh -i ssh_key.pem -o StrictHostKeyChecking=no ec2-user@$EC2_HOST << EOF
            # Pull the new image
            docker pull $DOCKERHUB_USERNAME/app_presente_front:staging

            # Start the new container on a temporary port to test it
            docker run -d --name app_presente_front_staging_new -p 3001:3000 -e NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL $DOCKERHUB_USERNAME/app_presente_front:staging

            # Wait for the container to start (account for HEALTHCHECK start-period)
            sleep 10

            # Wait and check if the new container is healthy
            echo "Waiting for the new container to become healthy..."
            for i in {1..20}
            do
              if docker inspect app_presente_front_staging_new --format='{{.State.Health.Status}}' | grep -q "healthy"; then
                echo "New container is healthy!"
                break
              fi
              if [ \$i -eq 20 ]; then
                echo "New container failed to become healthy!"
                echo "Container logs:"
                docker logs app_presente_front_staging_new
                docker stop app_presente_front_staging_new
                docker rm app_presente_front_staging_new
                exit 1
              fi
              sleep 3
            done

            # Stop and remove the old containers
            docker stop app_presente_frontend || true
            docker rm app_presente_frontend || true
            docker stop app_presente_front_staging || true
            docker rm app_presente_front_staging || true

            # Rename the new container and ensure it's stopped/removed before starting the final one
            docker rename app_presente_front_staging_new app_presente_front_staging
            docker stop app_presente_front_staging || true
            docker rm app_presente_front_staging || true

            # Start the final container on the correct port
            docker run -d --name app_presente_front_staging -p 3000:3000 -e NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL $DOCKERHUB_USERNAME/app_presente_front:staging

            # Verify the final container is running
            docker ps
          EOF

  deploy-production:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Debug DockerHub Username
        run: echo "DOCKERHUB_USERNAME is $DOCKERHUB_USERNAME"
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      - name: Build and Push Docker Image
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
          docker build -t $DOCKERHUB_USERNAME/app_presente_front:production .
          docker push $DOCKERHUB_USERNAME/app_presente_front:production
          echo "Pushed $DOCKERHUB_USERNAME/app_presente_front:production"
      - name: Debug EC2 Host
        run: echo "EC2_HOST is $EC2_HOST"
        env:
          EC2_HOST: ${{ secrets.PRODUCTION_EC2_HOST }}
      - name: Deploy to Production EC2
        env:
          EC2_HOST: ${{ secrets.PRODUCTION_EC2_HOST }}
          EC2_SSH_KEY: ${{ secrets.PRODUCTION_EC2_SSH_KEY }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
        run: |
          echo "$EC2_SSH_KEY" > ssh_key.pem
          chmod 400 ssh_key.pem
          ssh -i ssh_key.pem -o StrictHostKeyChecking=no ec2-user@$EC2_HOST << EOF
            # Pull the new image
            docker pull $DOCKERHUB_USERNAME/app_presente_front:production

            # Start the new container on a temporary port to test it
            docker run -d --name app_presente_front_production_new -p 8080:3000 -e NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL $DOCKERHUB_USERNAME/app_presente_front:production

            # Wait for the container to start (account for HEALTHCHECK start-period)
            sleep 10

            # Wait and check if the new container is healthy
            echo "Waiting for the new container to become healthy..."
            for i in {1..20}
            do
              if docker inspect app_presente_front_production_new --format='{{.State.Health.Status}}' | grep -q "healthy"; then
                echo "New container is healthy!"
                break
              fi
              if [ \$i -eq 20 ]; then
                echo "New container failed to become healthy!"
                echo "Container logs:"
                docker logs app_presente_front_production_new
                docker stop app_presente_front_production_new
                docker rm app_presente_front_production_new
                exit 1
              fi
              sleep 3
            done

            # Stop and remove the old container
            docker stop app_presente_front_production || true
            docker rm app_presente_front_production || true

            # Rename the new container and ensure it's stopped/removed before starting the final one
            docker rename app_presente_front_production_new app_presente_front_production
            docker stop app_presente_front_production || true
            docker rm app_presente_front_production || true

            # Start the final container on the correct port
            docker run -d --name app_presente_front_production -p 80:3000 -e NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL $DOCKERHUB_USERNAME/app_presente_front:production

            # Verify the final container is running
            docker ps
          EOF