# .github/workflows/frontend-ci-cd.yml
name: Frontend CI/CD – Stage & Prod

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]
  workflow_dispatch:

env:
  # ─── PROJECTOS/CLUSTERS ──────────────────────────────────────────────
  PROJECT_ID_STAGE:  app-chamada-stage
  PROJECT_ID_PROD:   app-chamada-5706
  REGION:            us-central1
  REPOSITORY:        frontend

  CLUSTER_STAGE:     stage-app-presente
  CLUSTER_STAGE_ZONE: us-west1-a
  NAMESPACE_STAGE:   stage-app-presente

  CLUSTER_PROD:      app-prod-fa395f7c
  CLUSTER_PROD_ZONE: us-central1-a
  NAMESPACE_PROD:    app-chamada-production

  DEPLOYMENT_NAME:   app-presente-front
  # ─────────────────────────────────────────────────────────────────────

jobs:
# 1) TESTES ─────────────────────────────────────────────────────────────
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 18, cache: npm }
      - run: npm ci
      - run: npm run lint
      - run: npm test

# 2) BUILD ──────────────────────────────────────────────────────────────
  build:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.build.outputs.image }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 18, cache: npm }
      - run: npm ci
      - run: npm run build
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}

      # Autentica no *PROJETO DE PRODUÇÃO* (onde ficará o Artifact Registry)
      - uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_CLOUD_KEYS }}   # ← novo secret
      - uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID_PROD }}
          export_default_credentials: true
      - run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      - id: build
        run: |
          IMAGE=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID_PROD }}/${{ env.REPOSITORY }}/${{ env.REPOSITORY }}:${GITHUB_SHA::8}
          echo "image=$IMAGE" >> $GITHUB_OUTPUT
          docker build -t $IMAGE .
          docker push  $IMAGE

# 3) DEPLOY STAGE ───────────────────────────────────────────────────────
  deploy-stage:
    if: github.ref == 'refs/heads/dev'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS_JSON_STAGE }}  # ← outro secret
      - uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID_STAGE }}
          install_components: kubectl
          export_default_credentials: true
      - run: gcloud components install gke-gcloud-auth-plugin -q
      - run: |
          gcloud container clusters get-credentials ${{ env.CLUSTER_STAGE }} \
            --zone  ${{ env.CLUSTER_STAGE_ZONE }} \
            --project ${{ env.PROJECT_ID_STAGE }}
      - run: kubectl create namespace ${{ env.NAMESPACE_STAGE }} || true
      - run: |
          kubectl apply -f k8s/stage/frontend-deployment.yaml -n ${{ env.NAMESPACE_STAGE }}
          kubectl apply -f k8s/stage/frontend-service.yaml    -n ${{ env.NAMESPACE_STAGE }}
          kubectl set image deployment/${{ env.DEPLOYMENT_NAME }} \
            ${{ env.DEPLOYMENT_NAME }}=${{ needs.build.outputs.image }} \
            -n ${{ env.NAMESPACE_STAGE }}
          kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME }} \
            -n ${{ env.NAMESPACE_STAGE }} --timeout=300s

# 4) DEPLOY PROD ────────────────────────────────────────────────────────
  deploy-prod:
    if: github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_CLOUD_KEYS }}
      - uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID_PROD }}
          install_components: kubectl
          export_default_credentials: true
      - run: gcloud components install gke-gcloud-auth-plugin -q
      - run: |
          gcloud container clusters get-credentials ${{ env.CLUSTER_PROD }} \
            --zone  ${{ env.CLUSTER_PROD_ZONE }} \
            --project ${{ env.PROJECT_ID_PROD }}
      - run: |
          kubectl apply -f k8s/production/frontend-deployment.yaml -n ${{ env.NAMESPACE_PROD }}
          kubectl apply -f k8s/production/frontend-service.yaml    -n ${{ env.NAMESPACE_PROD }}
          kubectl set image deployment/${{ env.DEPLOYMENT_NAME }} \
            ${{ env.DEPLOYMENT_NAME }}=${{ needs.build.outputs.image }} \
            -n ${{ env.NAMESPACE_PROD }}
          kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME }} \
            -n ${{ env.NAMESPACE_PROD }} --timeout=300s
