# .github/workflows/frontend-ci-cd.yml
name: Frontend CI/CD – Stage & Prod (Docker Hub)

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]
  workflow_dispatch:

env:
  CLUSTER_STAGE:          stage-app-presente
  CLUSTER_STAGE_ZONE:     us-west1-a
  PROJECT_ID_STAGE:       app-chamada-stage          # cluster stage
  NAMESPACE_STAGE:        stage-app-presente

  CLUSTER_PROD:           app-prod-fa395f7c
  CLUSTER_PROD_ZONE:      us-central1-a
  PROJECT_ID_PROD:        app-chamada-5706           # cluster prod
  NAMESPACE_PROD:         app-chamada-production

  DEPLOYMENT_NAME:        app-presente-front
  DOCKER_IMAGE:           guilherme310402/app_presente_front

jobs:
# ───────────────────────────────────────────────────────────────────
# 1) TESTE
# ───────────────────────────────────────────────────────────────────
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 18, cache: npm }
      - run: npm ci
      - run: npm run lint
      - run: npm test

# ───────────────────────────────────────────────────────────────────
# 2) BUILD & PUSH (Docker Hub)
# ───────────────────────────────────────────────────────────────────
  build:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.meta.outputs.image_tag }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 18, cache: npm }
      - run: npm ci
      - run: npm run build
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}

      # Faz login no Docker Hub
      - name: Docker Hub login
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | \
             docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      # Build & push
      - id: meta
        run: |
          TAG=${GITHUB_SHA::8}
          docker build --no-cache -t $DOCKER_IMAGE:$TAG -t $DOCKER_IMAGE:latest .
          docker push $DOCKER_IMAGE:$TAG
          docker push $DOCKER_IMAGE:latest
          echo "image_tag=$TAG" >> $GITHUB_OUTPUT

# ───────────────────────────────────────────────────────────────────
# 3) DEPLOY STAGE (branch dev)
# ───────────────────────────────────────────────────────────────────
  deploy-stage:
    if: github.ref == 'refs/heads/dev'
    needs: build
    runs-on: ubuntu-latest
    steps:
      # auth no projeto de stage
      - uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS_JSON_STAGE }}
      - uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID_STAGE }}
          install_components: kubectl
          export_default_credentials: true
      - run: gcloud components install gke-gcloud-auth-plugin -q
      - run: |
          gcloud container clusters get-credentials $CLUSTER_STAGE \
            --zone  $CLUSTER_STAGE_ZONE \
            --project $PROJECT_ID_STAGE
      - run: kubectl create namespace $NAMESPACE_STAGE || true
      - run: |
          kubectl apply -f k8s/stage/frontend-deployment.yaml -n $NAMESPACE_STAGE
          kubectl apply -f k8s/stage/frontend-service.yaml    -n $NAMESPACE_STAGE
          kubectl set image deployment/$DEPLOYMENT_NAME \
            $DEPLOYMENT_NAME=$DOCKER_IMAGE:${{ needs.build.outputs.image_tag }} \
            -n $NAMESPACE_STAGE
          kubectl rollout status deployment/$DEPLOYMENT_NAME \
            -n $NAMESPACE_STAGE --timeout=300s

# ───────────────────────────────────────────────────────────────────
# 4) DEPLOY PROD (branch main)
# ───────────────────────────────────────────────────────────────────
  deploy-prod:
    if: github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS_JSON_PROD }}
      - uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID_PROD }}
          install_components: kubectl
          export_default_credentials: true
      - run: gcloud components install gke-gcloud-auth-plugin -q
      - run: |
          gcloud container clusters get-credentials $CLUSTER_PROD \
            --zone  $CLUSTER_PROD_ZONE \
            --project $PROJECT_ID_PROD
      - run: |
          kubectl apply -f k8s/production/frontend-deployment.yaml -n $NAMESPACE_PROD
          kubectl apply -f k8s/production/frontend-service.yaml    -n $NAMESPACE_PROD
          kubectl set image deployment/$DEPLOYMENT_NAME \
            $DEPLOYMENT_NAME=$DOCKER_IMAGE:${{ needs.build.outputs.image_tag }} \
            -n $NAMESPACE_PROD
          kubectl rollout status deployment/$DEPLOYMENT_NAME \
            -n $NAMESPACE_PROD --timeout=300s
