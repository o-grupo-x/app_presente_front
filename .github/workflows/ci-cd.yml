name: Frontend CI/CD - GCP Kubernetes

on:
  push:
    branches:
      - main
      - dev
      - 'release/**'
  pull_request:
    branches:
      - main
      - dev
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GAR_LOCATION: us-central1
  CLUSTER_NAME: ${{ secrets.GKE_CLUSTER_NAME }}
  GKE_ZONE: ${{ secrets.GKE_ZONE }}
  DEPLOYMENT_NAME: app-presente-front
  DOCKER_IMAGE: guilherme310402/app_presente_front

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        working-directory: ./
        run: npm ci

      - name: Run linting
        working-directory: ./
        run: npm run lint

      - name: Run tests
        working-directory: ./
        run: npm test

  build:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev' || startsWith(github.ref, 'refs/heads/release/')
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        working-directory: ./
        run: npm ci

      - name: Build and push Docker image
        run: |
          COMMIT_SHA=${{ github.sha }}
          docker build --no-cache -t guilherme310402/app_presente_front:$COMMIT_SHA .
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
          docker push guilherme310402/app_presente_front:$COMMIT_SHA
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

  deploy:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev' || startsWith(github.ref, 'refs/heads/release/')
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - id: commit
        run: echo "SHORT_SHA=$(git rev-parse --short=7 HEAD)" >> $GITHUB_OUTPUT

      - id: 'auth'
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_CLOUD_KEYS }}
          project_id: app-chamada-5706

      - name: Set up Cloud SDK and kubectl
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: app-chamada-5706
          install_components: 'kubectl'

      - name: Install gke-gcloud-auth-plugin
        run: |
          sudo curl -Lo /usr/local/bin/gke-gcloud-auth-plugin \
            https://storage.googleapis.com/gke-release/gke-gcloud-auth-plugin/linux/amd64/gke-gcloud-auth-plugin
          sudo chmod +x /usr/local/bin/gke-gcloud-auth-plugin
          echo "USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> $GITHUB_ENV

      - name: Configure kubectl
        run: |
          gcloud container clusters get-credentials stage-app-presente \
            --region us-east1 \
            --project app-chamada-5706

      - name: Set environment variables
        run: |
          if [[ "${GITHUB_REF##*/}" == "main" ]]; then
            echo "NAMESPACE=production-app-presente" >> $GITHUB_ENV
          else
            echo "NAMESPACE=stage-app-presente" >> $GITHUB_ENV
          fi

      - name: Apply Kubernetes manifests (Service + Deployment)
        run: |
          export NAMESPACE=${{ env.NAMESPACE }}

          DEPLOY_DIR="k8s/production"
          if [[ "$NAMESPACE" == "stage-app-presente" ]]; then
            DEPLOY_DIR="k8s/stage"
          fi

          echo "=== $DEPLOY_DIR/frontend-service.yaml ==="
          cat $DEPLOY_DIR/frontend-service.yaml
          echo "=== $DEPLOY_DIR/frontend-deployment.yaml ==="
          cat $DEPLOY_DIR/frontend-deployment.yaml

          kubectl apply -f $DEPLOY_DIR/frontend-service.yaml
          kubectl apply -f $DEPLOY_DIR/frontend-deployment.yaml

      - name: Deploy to Kubernetes
        run: |
          COMMIT_SHA=${{ github.sha }}
          kubectl set image deployment/app-presente-front -n $NAMESPACE \
            app-presente-front=guilherme310402/app_presente_front:$COMMIT_SHA \
            --record
          kubectl rollout status deployment/app-presente-front \
            -n $NAMESPACE --timeout=120s

  release-notification:
    if: startsWith(github.ref, 'refs/heads/release/')
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Send email notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: saler.scl@gmail.com
          password: ${{ secrets.EMAIL_PASS }}
          subject: "üöÄ Nova vers√£o em pr√©-produ√ß√£o dispon√≠vel (Frontend)"
          to: saler.cez@gmail.com
          from: "Presente CI/CD <saler.scl@gmail.com>"
          html_body: |
            <h2>Nova vers√£o em pr√©-produ√ß√£o (Frontend)</h2>
            <p>Uma nova imagem foi constru√≠da e enviada para o Docker Hub com base no branch <strong>${{ github.ref_name }}</strong>.</p>
            <p><strong>Imagem:</strong> guilherme310402/app_presente_front:$COMMIT_SHA</p>
            <hr/>
            <p>Workflow: <a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}">Ver execu√ß√£o</a></p>
