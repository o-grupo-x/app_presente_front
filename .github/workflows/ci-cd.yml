# .github/workflows/frontend-ci-cd.yml
name: Frontend CI/CD – Stage & Prod (Docker Hub)

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev] # roda testes/build sem deploy
  workflow_dispatch:

env:
  # ── Stage ────────────────────────────────────────────────────────
  CLUSTER_STAGE: app-chamada-stage
  CLUSTER_STAGE_ZONE: us-west1-a
  PROJECT_ID_STAGE: app-chamada-stage
  NAMESPACE_STAGE: stage-app-presente
  # ── Prod ─────────────────────────────────────────────────────────
  CLUSTER_PROD: app-prod-fa395f7c
  CLUSTER_PROD_ZONE: us-central1-a
  PROJECT_ID_PROD: app-chamada-5706
  NAMESPACE_PROD: app-chamada-production
  # ── Comum ───────────────────────────────────────────────────────
  DEPLOYMENT_NAME: app-presente-front
  DOCKER_IMAGE: guilherme310402/app_presente_front

jobs:
  # ───────────────────────────────────────────────────────────────────
  # 1) TESTES
  # ───────────────────────────────────────────────────────────────────
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 18, cache: npm }
      - run: npm ci
      - run: npm run lint
      - run: npm test

  # ───────────────────────────────────────────────────────────────────
  # 2) BUILD & PUSH (Docker Hub)
  # ───────────────────────────────────────────────────────────────────
  build:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.prep.outputs.tag }}
    steps:
      - uses: actions/checkout@v4

      - name: Set BACKEND_API_HOST based on branch
        id: set-backend-host
        run: |
          if [[ "${GITHUB_REF##*/}" == "main" ]]; then
            echo "BACKEND_API_HOST=http://app-presente-back-service.app-chamada-production.svc.cluster.local:8000/api/:path*" >> $GITHUB_ENV
          else
            echo "BACKEND_API_HOST=http://app-presente-back-service.stage-app-presente.svc.cluster.local:8000/api/:path*" >> $GITHUB_ENV
          fi

      - name: Prepare tag
        id: prep
        run: echo "tag=${GITHUB_SHA::8}" >>"$GITHUB_OUTPUT"

      - uses: actions/setup-node@v4
        with: { node-version: 18, cache: npm }
      - run: npm ci
      - run: npm run build
        env:
          NEXT_PUBLIC_API_URL: ${{ env.BACKEND_API_HOST }}


      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:${{ steps.prep.outputs.tag }}
            ${{ env.DOCKER_IMAGE }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
  # ───────────────────────────────────────────────────────────────────
  # 3) DEPLOY STAGE  (push → dev)          ★  APENAS ESTE BLOCO MUDOU
  # ───────────────────────────────────────────────────────────────────
  deploy-stage:
    if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_CLOUD_KEYS }}

      - uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID_STAGE }}
          install_components: kubectl
          export_default_credentials: true

      - run: gcloud components install gke-gcloud-auth-plugin -q
      - run: |
          gcloud container clusters get-credentials "${{ env.CLUSTER_STAGE }}" \
            --zone "${{ env.CLUSTER_STAGE_ZONE }}" \
            --project "${{ env.PROJECT_ID_STAGE }}"

      # 1️⃣ garante que o namespace exista
      - run: kubectl create namespace "${{ env.NAMESPACE_STAGE }}" || true

      # 2️⃣ cria/atualiza o Secret (namespace já existe)
      - name: Ensure frontend secret (stage)
        run: |
          kubectl create secret generic app-presente-secrets \
            --from-literal=NEXT_PUBLIC_API_URL='${{ secrets.NEXT_PUBLIC_API_URL_STAGE }}' \
            -n "${{ env.NAMESPACE_STAGE }}" --dry-run=client -o yaml | kubectl apply -f -

      # 3️⃣ aplica manifests e faz rollout
      - run: |
          kubectl apply -f k8s/stage/frontend-deployment.yaml -n "${{ env.NAMESPACE_STAGE }}"
          kubectl apply -f k8s/stage/frontend-service.yaml    -n "${{ env.NAMESPACE_STAGE }}"
          kubectl set image deployment/${{ env.DEPLOYMENT_NAME }} \
            ${{ env.DEPLOYMENT_NAME }}=${{ env.DOCKER_IMAGE }}:${{ needs.build.outputs.image_tag }} \
            -n "${{ env.NAMESPACE_STAGE }}"
          kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME }} \
            -n "${{ env.NAMESPACE_STAGE }}" --timeout=300s

  # ───────────────────────────────────────────────────────────────────
  # 4) DEPLOY PROD   (push → main)
  # ───────────────────────────────────────────────────────────────────
  deploy-prod:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_CLOUD_KEYS }}

      - uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID_PROD }}
          install_components: kubectl
          export_default_credentials: true

      - run: gcloud components install gke-gcloud-auth-plugin -q
      - run: |
          gcloud container clusters get-credentials "${{ env.CLUSTER_PROD }}" \
            --zone "${{ env.CLUSTER_PROD_ZONE }}" \
            --project "${{ env.PROJECT_ID_PROD }}"

      - run: |
          kubectl apply -f k8s/production/frontend-deployment.yaml -n "${{ env.NAMESPACE_PROD }}"
          kubectl apply -f k8s/production/frontend-service.yaml    -n "${{ env.NAMESPACE_PROD }}"
          kubectl set image deployment/${{ env.DEPLOYMENT_NAME }} \
            ${{ env.DEPLOYMENT_NAME }}=${{ env.DOCKER_IMAGE }}:${{ needs.build.outputs.image_tag }} \
            -n "${{ env.NAMESPACE_PROD }}"
          kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME }} \
            -n "${{ env.NAMESPACE_PROD }}" --timeout=300s
